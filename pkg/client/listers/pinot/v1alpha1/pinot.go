/*
Copyright 2021 the Apache Pinot Kubernetes Operator authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/spaghettifunk/pinot-operator/api/pinot/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PinotLister helps list Pinots.
type PinotLister interface {
	// List lists all Pinots in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Pinot, err error)
	// Pinots returns an object that can list and get Pinots.
	Pinots(namespace string) PinotNamespaceLister
	PinotListerExpansion
}

// pinotLister implements the PinotLister interface.
type pinotLister struct {
	indexer cache.Indexer
}

// NewPinotLister returns a new PinotLister.
func NewPinotLister(indexer cache.Indexer) PinotLister {
	return &pinotLister{indexer: indexer}
}

// List lists all Pinots in the indexer.
func (s *pinotLister) List(selector labels.Selector) (ret []*v1alpha1.Pinot, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Pinot))
	})
	return ret, err
}

// Pinots returns an object that can list and get Pinots.
func (s *pinotLister) Pinots(namespace string) PinotNamespaceLister {
	return pinotNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PinotNamespaceLister helps list and get Pinots.
type PinotNamespaceLister interface {
	// List lists all Pinots in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Pinot, err error)
	// Get retrieves the Pinot from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Pinot, error)
	PinotNamespaceListerExpansion
}

// pinotNamespaceLister implements the PinotNamespaceLister
// interface.
type pinotNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Pinots in the indexer for a given namespace.
func (s pinotNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Pinot, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Pinot))
	})
	return ret, err
}

// Get retrieves the Pinot from the indexer for a given namespace and name.
func (s pinotNamespaceLister) Get(name string) (*v1alpha1.Pinot, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pinot"), name)
	}
	return obj.(*v1alpha1.Pinot), nil
}
